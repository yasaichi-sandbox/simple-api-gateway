/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createPostFromDiscriminatorValue, type Post } from '../models/index.ts';
import { type BaseRequestBuilder, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Builds and executes requests for operations under /posts
 */
export interface PostsRequestBuilder extends BaseRequestBuilder<PostsRequestBuilder> {
    /**
     * Get posts
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<Post[]>}
     */
     get(requestConfiguration?: RequestConfiguration<PostsRequestBuilderGetQueryParameters> | undefined) : Promise<Post[] | undefined>;
    /**
     * Get posts
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<PostsRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
}
/**
 * Get posts
 */
export interface PostsRequestBuilderGetQueryParameters {
    /**
     * Limit results by number
     */
    limit?: number;
    /**
     * Filter results by user ID
     */
    userId?: number;
}
/**
 * Uri template for the request builder.
 */
export const PostsRequestBuilderUriTemplate = "{+baseurl}/posts{?limit*,userId*}";
/**
 * Metadata for all the requests in the request builder.
 */
export const PostsRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: PostsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        adapterMethodName: "sendCollection",
        responseBodyFactory:  createPostFromDiscriminatorValue,
    },
};
/* tslint:enable */
/* eslint-enable */
